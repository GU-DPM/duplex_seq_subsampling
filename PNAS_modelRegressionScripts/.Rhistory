}
plotStrategyComparison_density("Evolutionary Classifier - Global", simResults[simResults$Category != "bothSame",])
plotStrategyComparison_density("Evolutionary Classifier - Move 1 Only", simResults[simResults$Category == "secondSame",])
# benefitDF needs to be the "melted" version
plotBenefit <- function(benefitName,benefitDF){
fit <- survfit(Surv(Survival,Status) ~ Strategy, data = benefitDF)
pTitle = paste(benefitName,", n = ",length(benefitDF$paramID)/2)
print(ggsurvplot(fit,data=benefitDF,title=pTitle,pval=FALSE))
}
# benefitDF needs to be the "melted" version
calcHazRatio <- function(benefitName,benefitDF){
hazRatio = coxph(formula=Surv(Survival,Status) ~ Strategy,data = benefitDF)
print(paste("Hazard Ratio for",benefitName))
print(exp(hazRatio$coefficients))
}
# benefitDF needs to be the full parameter set
plotStrategyComparison_hex <- function(benefitName,benefitDF){
p <- ggplot(benefitDF, aes(x=Surv_0, y=Surv_2.2)) +
geom_hex()  +
scale_fill_continuous(type = "Spectral") +
theme_bw() +
labs(title=paste("Distribuion of Benefit for",benefitName))
print(p)
}
# benefitDF needs to be the full parameter set
plotStrategyComparison_density <- function(benefitName,benefitDF){
p <- ggplot(benefitDF, aes(x=Surv_0, y=Surv_2.2)) +
stat_density_2d(aes(fill = ..density..), geom = "raster", contour = FALSE) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
theme(legend.position='none') +
labs(title=paste("Density of Benefit for",benefitName))
print(p)
}
plotStrategyComparison_hex("Evolutionary Classifier - Global", simResults[simResults$Category != "bothSame",])
# benefitDF needs to be the "melted" version
plotBenefit <- function(benefitName,benefitDF){
fit <- survfit(Surv(Survival,Status) ~ Strategy, data = benefitDF)
pTitle = paste(benefitName,", n = ",length(benefitDF$paramID)/2)
print(ggsurvplot(fit,data=benefitDF,title=pTitle,pval=FALSE))
}
# benefitDF needs to be the "melted" version
calcHazRatio <- function(benefitName,benefitDF){
hazRatio = coxph(formula=Surv(Survival,Status) ~ Strategy,data = benefitDF)
print(paste("Hazard Ratio for",benefitName))
print(exp(hazRatio$coefficients))
}
# benefitDF needs to be the full parameter set
plotStrategyComparison_hex <- function(benefitName,benefitDF){
p <- ggplot(benefitDF, aes(x=Surv_0, y=Surv_2.2)) +
geom_hex()  +
scale_fill_continuous(type = "viridis") +
theme_bw() +
labs(title=paste("Distribuion of Benefit for",benefitName))
print(p)
}
# benefitDF needs to be the full parameter set
plotStrategyComparison_density <- function(benefitName,benefitDF){
p <- ggplot(benefitDF,], aes(x=Surv_0, y=Surv_2.2)) +
# benefitDF needs to be the "melted" version
plotBenefit <- function(benefitName,benefitDF){
fit <- survfit(Surv(Survival,Status) ~ Strategy, data = benefitDF)
pTitle = paste(benefitName,", n = ",length(benefitDF$paramID)/2)
print(ggsurvplot(fit,data=benefitDF,title=pTitle,pval=FALSE))
}
# benefitDF needs to be the "melted" version
calcHazRatio <- function(benefitName,benefitDF){
hazRatio = coxph(formula=Surv(Survival,Status) ~ Strategy,data = benefitDF)
print(paste("Hazard Ratio for",benefitName))
print(exp(hazRatio$coefficients))
}
# benefitDF needs to be the full parameter set
plotStrategyComparison_hex <- function(benefitName,benefitDF){
p <- ggplot(benefitDF, aes(x=Surv_0, y=Surv_2.2)) +
geom_hex()  +
scale_fill_continuous(type = "viridis") +
theme_bw() +
labs(title=paste("Distribuion of Benefit for",benefitName))
print(p)
}
# benefitDF needs to be the full parameter set
plotStrategyComparison_density <- function(benefitName,benefitDF){
p <- ggplot(simResults[benefitDF,], aes(x=Surv_0, y=Surv_2.2)) +
stat_density_2d(aes(fill = ..density..), geom = "raster", contour = FALSE) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
theme(legend.position='none') +
labs(title=paste("Density of Benefit for",benefitName))
print(p)
}
plotStrategyComparison_hex("Evolutionary Classifier - Global", simResults[simResults$Category != "bothSame",])
plotStrategyComparison_hex("Evolutionary Classifier - Move 1 Only", simResults[simResults$Category == "secondSame",])
View(plotStrategyComparison_hex)
simResults_km.ind_patient_ben = simResults_km[simResults_km$improvementDPM,]
simResults_km.evo_class_global = simResults_km[simResults_km$Category != "bothSame",]
simResults_km.evo_class_move1 = simResults_km[simResults_km$Category != "bothDiff" & simResults_km$Category != "firstSame",]
simResults_km.evo_class_move1only = simResults_km[simResults_km$Category == "secondSame",]
simResults_km.evo_class_move2only = simResults_km[simResults_km$Category == "firstSame",]
simResults_km.eco_class_same = simResults_km[simResults_km$Category == "bothSame",]
simResults_km.eco_class_same_noBenefit = simResults_km[simResults_km$Category == "bothSame" & !simResults_km$improvementDPM,]
simResults.ind_patient_ben = simResults[simResults$improvementDPM,]
simResults.evo_class_global = simResults[simResults$Category != "bothSame",]
simResults.evo_class_move1 = simResults[simResults$Category != "bothDiff" & simResults$Category != "firstSame",]
simResults.evo_class_move1only = simResults[simResults$Category == "secondSame",]
simResults.evo_class_move2only = simResults[simResults$Category == "firstSame",]
simResults.eco_class_same = simResults[simResults$Category == "bothSame",]
simResults.eco_class_same_noBenefit = simResults[simResults$Category == "bothSame" & !simResults$improvementDPM,]
View(simResults)
View(simResults.eco_class_same)
library(survival)
library(survminer)
library(reshape2)
library(ggplot2)
library(ggExtra)
simResults = read.table("DMP_simTrialResults.csv.gz",sep=",",header=TRUE)
simResults_km = simResults[,c("paramID","Category","Surv_0","Surv_2.2","Surv_2.2trial","improvementDPM")]
simResults_km = melt(simResults_km,id.vars = c("paramID","Category","improvementDPM"))
names(simResults_km)[c(4,5)] <- c("Strategy","Survival")
status <- rep(1,length(simResults_km$Survival))
status[simResults_km$Survival >= 1800] <- 0
simResults_km$Status <- status
lentgh(simResults_km)
len(simResults_km)
length(simResults_km)
length(simResults_km$paramID)
length(unique(simResults_km$paramID))
# benefitDF needs to be the "melted" version
plotBenefit <- function(benefitName,benefitDF){
fit <- survfit(Surv(Survival,Status) ~ Strategy, data = benefitDF)
numPatients = length(unique(simResults_km$paramID))
pTitle = paste(benefitName,", n = ",length(benefitDF$paramID)/numPatients)
print(ggsurvplot(fit,data=benefitDF,title=pTitle,pval=FALSE))
}
# benefitDF needs to be the "melted" version
calcHazRatio <- function(benefitName,benefitDF){
hazRatio = coxph(formula=Surv(Survival,Status) ~ Strategy,data = benefitDF)
print(paste("Hazard Ratio for",benefitName))
print(exp(hazRatio$coefficients))
}
# benefitDF needs to be the full parameter set
plotStrategyComparison_hex <- function(benefitName,benefitDF){
p <- ggplot(benefitDF, aes(x=Surv_0, y=Surv_2.2)) +
geom_hex()  +
scale_fill_continuous(type = "viridis") +
theme_bw() +
labs(title=paste("Distribuion of Benefit for",benefitName))
print(p)
}
# benefitDF needs to be the full parameter set
plotStrategyComparison_density <- function(benefitName,benefitDF){
p <- ggplot(simResults[benefitDF,], aes(x=Surv_0, y=Surv_2.2)) +
stat_density_2d(aes(fill = ..density..), geom = "raster", contour = FALSE) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
theme(legend.position='none') +
labs(title=paste("Density of Benefit for",benefitName))
print(p)
}
plotBenefit("Individual Patient Benefit", simResults_km.ind_patient_ben)
plotBenefit("Evolutionary Classifier - Global", simResults_km.evo_class_global)
plotBenefit("Evolutionary Classifier - Move 1", simResults_km.evo_class_move1)
plotBenefit("Evolutionary Classifier - Move 1 Only", simResults_km.evo_class_move1only)
plotBenefit("Evolutionary Classifier - Move 2 Only", simResults_km.evo_class_move2only)
plotBenefit("Evolutionary Classifier - Move 2 Only", simResults_km.evo_class_move2only)
plotBenefit("Evolutionary Classifier - Both Same", simResults_km.eco_class_same)
plotBenefit("Evolutionary Classifier - Both Same, no DPM Benefit", simResults_km.eco_class_same_noBenefit)
plotBenefit("Full Population", simResults_km)
simResults_km.ind_patient_ben = simResults_km[simResults_km$improvementDPM,]
simResults_km.evo_class_global = simResults_km[simResults_km$Category != "bothSame",]
simResults_km.evo_class_move1 = simResults_km[simResults_km$Category != "bothDiff" & simResults_km$Category != "firstSame",]
simResults_km.evo_class_move1only = simResults_km[simResults_km$Category == "secondSame",]
simResults_km.evo_class_move2only = simResults_km[simResults_km$Category == "firstSame",]
simResults_km.eco_class_same = simResults_km[simResults_km$Category == "bothSame",]
simResults_km.eco_class_same_noBenefit = simResults_km[simResults_km$Category == "bothSame" & !simResults_km$improvementDPM,]
simResults.ind_patient_ben = simResults[simResults$improvementDPM,]
simResults.evo_class_global = simResults[simResults$Category != "bothSame",]
simResults.evo_class_move1 = simResults[simResults$Category != "bothDiff" & simResults$Category != "firstSame",]
simResults.evo_class_move1only = simResults[simResults$Category == "secondSame",]
simResults.evo_class_move2only = simResults[simResults$Category == "firstSame",]
simResults.eco_class_same = simResults[simResults$Category == "bothSame",]
simResults.eco_class_same_noBenefit = simResults[simResults$Category == "bothSame" & !simResults$improvementDPM,]
plotBenefit("Evolutionary Classifier - Both Same, no DPM Benefit", simResults_km.eco_class_same_noBenefit)
View(simResults_km.ind_patient_ben)
# benefitDF needs to be the "melted" version
plotBenefit <- function(benefitName,benefitDF){
fit <- survfit(Surv(Survival,Status) ~ Strategy, data = benefitDF)
numPatients = length(unique(benefitDF$paramID))
print(numPatients)
pTitle = paste(benefitName,", n = ",length(benefitDF$paramID)/numPatients)
#print(ggsurvplot(fit,data=benefitDF,title=pTitle,pval=FALSE))
}
# benefitDF needs to be the "melted" version
calcHazRatio <- function(benefitName,benefitDF){
hazRatio = coxph(formula=Surv(Survival,Status) ~ Strategy,data = benefitDF)
print(paste("Hazard Ratio for",benefitName))
print(exp(hazRatio$coefficients))
}
# benefitDF needs to be the full parameter set
plotStrategyComparison_hex <- function(benefitName,benefitDF){
p <- ggplot(benefitDF, aes(x=Surv_0, y=Surv_2.2)) +
geom_hex()  +
scale_fill_continuous(type = "viridis") +
theme_bw() +
labs(title=paste("Distribuion of Benefit for",benefitName))
print(p)
}
# benefitDF needs to be the full parameter set
plotStrategyComparison_density <- function(benefitName,benefitDF){
p <- ggplot(simResults[benefitDF,], aes(x=Surv_0, y=Surv_2.2)) +
stat_density_2d(aes(fill = ..density..), geom = "raster", contour = FALSE) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
theme(legend.position='none') +
labs(title=paste("Density of Benefit for",benefitName))
print(p)
}
plotBenefit("Evolutionary Classifier - Both Same, no DPM Benefit", simResults_km.eco_class_same_noBenefit)
plotBenefit("Full Population", simResults_km)
# benefitDF needs to be the "melted" version
plotBenefit <- function(benefitName,benefitDF){
fit <- survfit(Surv(Survival,Status) ~ Strategy, data = benefitDF)
numPatients = length(unique(benefitDF$paramID))
pTitle = paste(benefitName,", n = ",length(benefitDF$paramID)/numPatients)
print(ggsurvplot(fit,data=benefitDF,title=pTitle,pval=FALSE))
}
# benefitDF needs to be the "melted" version
calcHazRatio <- function(benefitName,benefitDF){
hazRatio = coxph(formula=Surv(Survival,Status) ~ Strategy,data = benefitDF)
print(paste("Hazard Ratio for",benefitName))
print(exp(hazRatio$coefficients))
}
# benefitDF needs to be the full parameter set
plotStrategyComparison_hex <- function(benefitName,benefitDF){
p <- ggplot(benefitDF, aes(x=Surv_0, y=Surv_2.2)) +
geom_hex()  +
scale_fill_continuous(type = "viridis") +
theme_bw() +
labs(title=paste("Distribuion of Benefit for",benefitName))
print(p)
}
# benefitDF needs to be the full parameter set
plotStrategyComparison_density <- function(benefitName,benefitDF){
p <- ggplot(simResults[benefitDF,], aes(x=Surv_0, y=Surv_2.2)) +
stat_density_2d(aes(fill = ..density..), geom = "raster", contour = FALSE) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
theme(legend.position='none') +
labs(title=paste("Density of Benefit for",benefitName))
print(p)
}
plotBenefit("Evolutionary Classifier - Both Same, no DPM Benefit", simResults_km.eco_class_same_noBenefit)
plotBenefit("Evolutionary Classifier - Both Same, no DPM Benefit", simResults_km.eco_class_same_noBenefit)
calcHazRatio("Evolutionary Classifier - Both Same, no DPM Benefit", simResults_km.eco_class_same_noBenefit)
plotStrategyComparison_hex("Evolutionary Classifier - Both Same, no DPM Benefit", simResults_km.eco_class_same_noBenefit)
plotStrategyComparison_hex("Individual Patient Benefit", simResults_km.ind_patient_ben)
plotStrategyComparison_hex("Evolutionary Classifier - Both Same, no DPM Benefit", simResultsm.eco_class_same_noBenefit)
plotStrategyComparison_hex("Evolutionary Classifier - Both Same, no DPM Benefit", simResults.eco_class_same_noBenefit)
# benefitDF needs to be the "melted" version
plotBenefit <- function(benefitName,benefitDF){
fit <- survfit(Surv(Survival,Status) ~ Strategy, data = benefitDF)
numPatients = length(unique(benefitDF$paramID))
pTitle = paste(benefitName,", n = ",length(benefitDF$paramID)/numPatients)
print(ggsurvplot(fit,data=benefitDF,title=pTitle,pval=FALSE))
}
# benefitDF needs to be the "melted" version
calcHazRatio <- function(benefitName,benefitDF){
hazRatio = coxph(formula=Surv(Survival,Status) ~ Strategy,data = benefitDF)
print(paste("Hazard Ratio for",benefitName))
print(exp(hazRatio$coefficients))
}
# benefitDF needs to be the full parameter set
plotStrategyComparison_hex <- function(benefitName,benefitDF){
p <- ggplot(benefitDF, aes(x=Surv_0, y=Surv_2.2)) +
geom_hex()  +
scale_fill_continuous(type = "viridis") +
theme_bw() +
labs(title=paste("Distribuion of Benefit for",benefitName))
print(p)
q <- ggplot(benefitDF, aes(x=Surv_0, y=Surv_2.2trial)) +
geom_hex()  +
scale_fill_continuous(type = "viridis") +
theme_bw() +
labs(title=paste("Distribuion of Benefit for",benefitName))
print(q)
}
# benefitDF needs to be the full parameter set
plotStrategyComparison_density <- function(benefitName,benefitDF){
p <- ggplot(simResults[benefitDF,], aes(x=Surv_0, y=Surv_2.2)) +
stat_density_2d(aes(fill = ..density..), geom = "raster", contour = FALSE) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
theme(legend.position='none') +
labs(title=paste("Density of Benefit for",benefitName))
print(p)
q <- ggplot(simResults[benefitDF,], aes(x=Surv_0, y=Surv_2.2trial)) +
stat_density_2d(aes(fill = ..density..), geom = "raster", contour = FALSE) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
theme(legend.position='none') +
labs(title=paste("Density of Benefit for",benefitName))
print(q)
}
plotStrategyComparison_hex("Evolutionary Classifier - Both Same, no DPM Benefit", simResults.eco_class_same_noBenefit)
plotStrategyComparison_density("Evolutionary Classifier - Both Same, no DPM Benefit", simResults.eco_class_same_noBenefit)
plotStrategyComparison_density("Evolutionary Classifier - Both Same, no DPM Benefit", simResults.eco_class_same_noBenefit)
# benefitDF needs to be the "melted" version
plotBenefit <- function(benefitName,benefitDF){
fit <- survfit(Surv(Survival,Status) ~ Strategy, data = benefitDF)
numPatients = length(unique(benefitDF$paramID))
pTitle = paste(benefitName,", n = ",length(benefitDF$paramID)/numPatients)
print(ggsurvplot(fit,data=benefitDF,title=pTitle,pval=FALSE))
}
# benefitDF needs to be the "melted" version
calcHazRatio <- function(benefitName,benefitDF){
hazRatio = coxph(formula=Surv(Survival,Status) ~ Strategy,data = benefitDF)
print(paste("Hazard Ratio for",benefitName))
print(exp(hazRatio$coefficients))
}
# benefitDF needs to be the full parameter set
plotStrategyComparison_hex <- function(benefitName,benefitDF){
p <- ggplot(benefitDF, aes(x=Surv_0, y=Surv_2.2)) +
geom_hex()  +
scale_fill_continuous(type = "viridis") +
theme_bw() +
labs(title=paste("Distribuion of Benefit for",benefitName))
print(p)
q <- ggplot(benefitDF, aes(x=Surv_0, y=Surv_2.2trial)) +
geom_hex()  +
scale_fill_continuous(type = "viridis") +
theme_bw() +
labs(title=paste("Distribuion of Benefit for",benefitName))
print(q)
}
# benefitDF needs to be the full parameter set
plotStrategyComparison_density <- function(benefitName,benefitDF){
p <- ggplot(benefitDF, aes(x=Surv_0, y=Surv_2.2)) +
stat_density_2d(aes(fill = ..density..), geom = "raster", contour = FALSE) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
theme(legend.position='none') +
labs(title=paste("Density of Benefit for",benefitName))
print(p)
q <- ggplot(benefitDF, aes(x=Surv_0, y=Surv_2.2trial)) +
stat_density_2d(aes(fill = ..density..), geom = "raster", contour = FALSE) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
theme(legend.position='none') +
labs(title=paste("Density of Benefit for",benefitName))
print(q)
}
plotStrategyComparison_density("Evolutionary Classifier - Both Same, no DPM Benefit", simResults.eco_class_same_noBenefit)
plotStrategyComparison_hex("Evolutionary Classifier - Both Same, no DPM Benefit", simResults.eco_class_same_noBenefit)
# benefitDF needs to be the "melted" version
plotBenefit <- function(benefitName,benefitDF){
fit <- survfit(Surv(Survival,Status) ~ Strategy, data = benefitDF)
numPatients = length(unique(benefitDF$paramID))
pTitle = paste(benefitName,", n = ",length(benefitDF$paramID)/numPatients)
print(ggsurvplot(fit,data=benefitDF,title=pTitle,pval=FALSE))
}
# benefitDF needs to be the "melted" version
calcHazRatio <- function(benefitName,benefitDF){
hazRatio = coxph(formula=Surv(Survival,Status) ~ Strategy,data = benefitDF)
print(paste("Hazard Ratio for",benefitName))
print(exp(hazRatio$coefficients))
}
# benefitDF needs to be the full parameter set
plotStrategyComparison_hex <- function(benefitName,benefitDF){
p <- ggplot(benefitDF, aes(x=Surv_0, y=Surv_2.2)) +
geom_hex()  +
scale_fill_continuous(type = "viridis") +
theme_bw() +
labs(title=paste("Distribuion of Benefit for",benefitName))
print(p)
q <- ggplot(benefitDF, aes(x=Surv_0, y=Surv_2.2trial)) +
geom_hex()  +
scale_fill_continuous(type = "viridis") +
theme_bw() +
labs(title=paste("Distribuion of Benefit for",benefitName))
print(q)
}
s <- ggplot(benefitDF, aes(x=Surv_2.2trial, y=Surv_2.2)) +
geom_hex()  +
scale_fill_continuous(type = "viridis") +
theme_bw() +
labs(title=paste("Distribuion of Benefit for",benefitName))
plotStrategyComparison_hex("Evolutionary Classifier - Both Same, no DPM Benefit", simResults.eco_class_same_noBenefit)
# benefitDF needs to be the "melted" version
plotBenefit <- function(benefitName,benefitDF){
fit <- survfit(Surv(Survival,Status) ~ Strategy, data = benefitDF)
numPatients = length(unique(benefitDF$paramID))
pTitle = paste(benefitName,", n = ",length(benefitDF$paramID)/numPatients)
print(ggsurvplot(fit,data=benefitDF,title=pTitle,pval=FALSE))
}
# benefitDF needs to be the "melted" version
calcHazRatio <- function(benefitName,benefitDF){
hazRatio = coxph(formula=Surv(Survival,Status) ~ Strategy,data = benefitDF)
print(paste("Hazard Ratio for",benefitName))
print(exp(hazRatio$coefficients))
}
# benefitDF needs to be the full parameter set
plotStrategyComparison_hex <- function(benefitName,benefitDF){
p <- ggplot(benefitDF, aes(x=Surv_0, y=Surv_2.2)) +
geom_hex()  +
scale_fill_continuous(type = "viridis") +
theme_bw() +
labs(title=paste("Distribuion of Benefit for",benefitName))
print(p)
q <- ggplot(benefitDF, aes(x=Surv_0, y=Surv_2.2trial)) +
geom_hex()  +
scale_fill_continuous(type = "viridis") +
theme_bw() +
labs(title=paste("Distribuion of Benefit for",benefitName))
print(q)
}
s <- ggplot(benefitDF, aes(x=Surv_2.2trial, y=Surv_2.2)) +
geom_hex()  +
scale_fill_continuous(type = "viridis") +
theme_bw() +
labs(title=paste("Distribuion of Benefit for",benefitName))
# benefitDF needs to be the "melted" version
plotBenefit <- function(benefitName,benefitDF){
fit <- survfit(Surv(Survival,Status) ~ Strategy, data = benefitDF)
numPatients = length(unique(benefitDF$paramID))
pTitle = paste(benefitName,", n = ",length(benefitDF$paramID)/numPatients)
print(ggsurvplot(fit,data=benefitDF,title=pTitle,pval=FALSE))
}
# benefitDF needs to be the "melted" version
calcHazRatio <- function(benefitName,benefitDF){
hazRatio = coxph(formula=Surv(Survival,Status) ~ Strategy,data = benefitDF)
print(paste("Hazard Ratio for",benefitName))
print(exp(hazRatio$coefficients))
}
# benefitDF needs to be the full parameter set
plotStrategyComparison_hex <- function(benefitName,benefitDF){
p <- ggplot(benefitDF, aes(x=Surv_0, y=Surv_2.2)) +
geom_hex()  +
scale_fill_continuous(type = "viridis") +
theme_bw() +
labs(title=paste("Distribuion of Benefit for",benefitName))
print(p)
q <- ggplot(benefitDF, aes(x=Surv_0, y=Surv_2.2trial)) +
geom_hex()  +
scale_fill_continuous(type = "viridis") +
theme_bw() +
labs(title=paste("Distribuion of Benefit for",benefitName))
print(q)
s <- ggplot(benefitDF, aes(x=Surv_2.2trial, y=Surv_2.2)) +
geom_hex()  +
scale_fill_continuous(type = "viridis") +
theme_bw() +
labs(title=paste("Distribuion of Benefit for",benefitName))
print(s)
}
# benefitDF needs to be the full parameter set
plotStrategyComparison_density <- function(benefitName,benefitDF){
p <- ggplot(benefitDF, aes(x=Surv_0, y=Surv_2.2)) +
stat_density_2d(aes(fill = ..density..), geom = "raster", contour = FALSE) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
theme(legend.position='none') +
labs(title=paste("Density of Benefit for",benefitName))
print(p)
q <- ggplot(benefitDF, aes(x=Surv_0, y=Surv_2.2trial)) +
stat_density_2d(aes(fill = ..density..), geom = "raster", contour = FALSE) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
theme(legend.position='none') +
labs(title=paste("Density of Benefit for",benefitName))
print(q)
s <- ggplot(benefitDF, aes(x=Surv_2.2trial, y=Surv_2.2)) +
stat_density_2d(aes(fill = ..density..), geom = "raster", contour = FALSE) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
theme(legend.position='none') +
labs(title=paste("Density of Benefit for",benefitName))
print(s)
}
plotBenefit("Evolutionary Classifier - Both Same, no DPM Benefit", simResults_km.eco_class_same_noBenefit)
library(dplyr)
library(Seurat)
install.packages('Matrix')
install.packages('Rtools')
install.packages('Matrix')
??install.packagesw
??install.packages
install.packages('Matrix')
install.packages('Matrix')
Biobase::package.version("Matrix")
remove.packages("Seurat")
remove.packages("patchwork")
install.packages('Matrix')
install.packages("Rtools")
find_rtools()
devtools::install_github("r-lib/pkgbuild")
library(pkgbuild)
find_rtools()
library(dplyr)
library(Seurat)
install.packages('Matrix')
library(Matrix, lib.loc = "C:/Program Files/R/R-4.1.1/library")
detach("package:Matrix", unload = TRUE)
library(Matrix, lib.loc = "C:/Program Files/R/R-4.1.1/library")
remove.packages("Matrix", lib="C:/Program Files/R/R-4.1.1/library")
install.packages('Matrix')
library(dplyr)
library(Seurat)
library(dplyr)
library(Seurat)
library(Seurat)
library(Matrix, lib.loc = "C:/Program Files/R/R-4.1.1/library")
install.packages('Matrix')
setwd("~/GitHub/duplex_seq_subsampling/PNAS_modelRegressionScripts")
